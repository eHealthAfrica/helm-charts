apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-init-py-config
data:
  create_ro_user.py: |
    #!/usr/bin/env python3
    '''
    Create a readonly user in the kernel database.

    Background: aether producers can query the kernel database via psycopg2,
    bypassing the safety checks django provides. They only need read permissions
    and should therefore use a readonly user.

    This script is intended to run in the `setup_db` block of `entrypoint.sh`, with
    access to all environment variables available in that context.
    '''

    import os
    import psycopg2
    from psycopg2 import sql

    # Create a readonly user with username "{role}" if none exists.
    # Grant read permission for relevant tables.
    CREATE_READONLY_USER = '''
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = {rolename})
      THEN
          CREATE ROLE {role} WITH LOGIN ENCRYPTED PASSWORD {password}
          INHERIT NOSUPERUSER NOCREATEDB NOCREATEROLE NOREPLICATION;
      END IF;
    END
    $$ LANGUAGE plpgsql;

    REVOKE ALL PRIVILEGES ON DATABASE {database} FROM {role} CASCADE;

    GRANT CONNECT ON DATABASE {database} TO {role};
    GRANT USAGE ON SCHEMA public TO {role};
    GRANT SELECT ON kernel_entity TO {role};
    GRANT SELECT ON kernel_mapping TO {role};
    GRANT SELECT ON kernel_projectschema TO {role};
    GRANT SELECT ON kernel_schema TO {role};
    '''


    def main():
        db_name = os.environ['DB_NAME']
        db_host = os.environ['PGHOST']
        db_port = os.environ['PGPORT']
        root_user = os.environ['PGUSER']

        postgres_credentials = {
            'dbname': db_name,
            'host': db_host,
            'port': db_port,
            'user': root_user,
        }

        with psycopg2.connect(**postgres_credentials) as conn:
            ro_role = os.environ['KERNEL_READONLY_DB_USERNAME']
            ro_password = os.environ['KERNEL_READONLY_DB_PASSWORD']
            cursor = conn.cursor()
            query = sql.SQL(CREATE_READONLY_USER).format(
                database=sql.Identifier(dbname),
                role=sql.Identifier(ro_role),
                rolename=sql.Literal(ro_role),
                password=sql.Literal(ro_password),
            )
            cursor.execute(query)


    if __name__ == '__main__':
        main()
