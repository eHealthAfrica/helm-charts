apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-init-py-config
data:
  create_ro_user.py: |
    #!/usr/bin/env python3
    '''
    Create a readonly user in the kernel database.

    Background: aether producers can query the kernel database via psycopg2,
    bypassing the safety checks django provides. They only need read permissions
    and should therefore use a readonly user.

    This script is intended to run in the `setup_db` block of `entrypoint.sh`, with
    access to all environment variables available in that context.
    '''

    import os
    import psycopg2
    from psycopg2 import sql
    from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

    # `CREATE DATABASE` statements cannot run inside a transaction block, so we
    # have to execute it independently. Besides, we also want to catch and silence
    # the exception resulting when the DB already exists.
    CREATE_DB = "CREATE DATABASE {database}"

    # Create a readonly user with username "{role}" if none exists.
    # Grant read permission for relevant tables.
    CREATE_READONLY_USER = '''
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = {rolename})
      THEN
          CREATE ROLE {role} WITH LOGIN ENCRYPTED PASSWORD {password}
          INHERIT NOSUPERUSER NOCREATEDB NOCREATEROLE NOREPLICATION;
      END IF;
    END
    $$ LANGUAGE plpgsql;

    REVOKE ALL PRIVILEGES ON DATABASE {database} FROM {role} CASCADE;

    GRANT CONNECT ON DATABASE {database} TO {role};
    GRANT USAGE ON SCHEMA public TO {role};
    '''


    def create_database(credentials):
        db_name = credentials['dbname']
        query = sql.SQL(CREATE_DB).format(database=sql.Identifier(db_name))
        try:
            execute(credentials, query, transaction=False)
        # Don't exit if database already exists
        except psycopg2.ProgrammingError:
            pass


    def create_readonly_user(credentials):
        db_name = credentials['dbname']
        ro_role = os.environ['KERNEL_READONLY_DB_USERNAME']
        ro_password = os.environ['KERNEL_READONLY_DB_PASSWORD']

        print("Creating user '{user}' on '{db}'".format(user=ro_role, db=db_name))

        query = sql.SQL(CREATE_READONLY_USER).format(
            database=sql.Identifier(db_name),
            role=sql.Identifier(ro_role),
            rolename=sql.Literal(ro_role),
            password=sql.Literal(ro_password),
        )
        execute(credentials, query)
        print('User created successfuly')


    def execute(credentials, query, transaction=True):
        with psycopg2.connect(**credentials) as conn:
            if not transaction:
                conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            cursor = conn.cursor()
            cursor.execute(query)


    def main():
        db_name = os.environ['DB_NAME']
        db_host = os.environ['PGHOST']
        db_port = os.environ['PGPORT']
        root_user = os.environ['PGUSER']
        root_password = os.environ['PGPASSWORD']

        postgres_credentials = {
            'dbname': db_name,
            'host': db_host,
            'port': db_port,
            'user': root_user,
            'password': root_password,
        }

        create_database(postgres_credentials);
        create_readonly_user(postgres_credentials);


    if __name__ == '__main__':
        main()
