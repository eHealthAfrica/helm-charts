apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    chart: {{ template "kernel.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  progressDeadlineSeconds: 180
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      release: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  {{ if .Values.podAntiAffinity.enabled }}
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - {{ .Chart.Name }}
          topologyKey: "kubernetes.io/hostname"
  {{ end }}
  template:
    metadata:
      {{ if .Values.kube2iam.enabled }}
      annotations:
        iam.amazonaws.com/role: {{ .Values.app.iam.role }}
      {{ end }}
      labels:
        app: {{ .Chart.Name }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: init-pg
        image: postgres:9.3-alpine
        command: ['bash', '-c', './scripts/init.sh']
        env:
        - name: PGHOST
          valueFrom :
            secretKeyRef:
              name: {{ .Values.app.db.secret }}
              key: host
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secret }}
              key: user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secret }}
              key: password
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: kernel-database-password
        - name: DB_USERNAME
          value: {{ .Values.app.db.user }}
        - name: DB_NAME
          value: {{ .Values.app.db.name }}
        volumeMounts:
        - mountPath: /scripts
          name: init-pg-config
        {{ if .Values.provider.gcp }}
        {{- template "kernel.cloudsqlsecret" }}
        {{ end }}
      - name: init-kernel-setup
        image: "{{ .Values.app.repository }}:{{ .Values.app.tag | default .Chart.Version }}"
        imagePullPolicy: {{ .Values.pullPolicy }}
        command: ['bash', '-c', '/scripts/shell/setup.sh']
        {{- template "kernel.env" }}
        volumeMounts:
        - mountPath: /scripts/shell
          name: init-setup-sh
        {{ if .Values.provider.gcp }}
        - mountPath: /secrets/cloudsql
          name: cloudsql-instance-credentials
          readOnly: true
        {{ end }}
      {{ if .Values.app.db.create_ro_user }}
      - name: init-kernel-create-readonly-user
        image: "{{ .Values.app.repository }}:{{ .Values.app.tag | default .Chart.Version }}"
        imagePullPolicy: {{ .Values.pullPolicy }}
        command: ['/bin/sh', '/scripts/shell/create_ro_user.sh']
        {{- template "kernel.readonlyuserenv" }}
        volumeMounts:
        - mountPath: /scripts/shell
          name: init-create-readonly-user-sh
        {{ if .Values.provider.gcp }}
        {{- template "kernel.cloudsqlsecret" }}
        {{ end }}
      {{ end }}
      containers:
      {{ if .Values.provider.gcp }}
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.11
        command: ["/cloud_sql_proxy",
                  "-instances={{ .Values.database.instance }}=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
        {{- template "kernel.cloudsqlsecret" }}
      {{ end }}
      - name: nginx
        image: nginx:stable-alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /var/www/static
          name: static-assets-volume
        - mountPath: /etc/nginx/conf.d
          name: nginx-config
      - name: kernel
        image: "{{ .Values.app.repository }}:{{ .Values.app.tag | default .Chart.Version }}"
        imagePullPolicy: {{ .Values.pullPolicy }}
        args:
        - {{ .Values.app.command }}
        ports:
        - name: http
          containerPort: {{ .Values.app.port }}
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: X-Kubernetes-Health-Check
              value: livenessProbe
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: X-Kubernetes-Health-Check
              value: readinessProbe
        {{- template "kernel.env" }}
        volumeMounts:
        - mountPath: /var/www/static
          name: static-assets-volume
        {{ if .Values.provider.gcp }}
        - mountPath: /secrets/gcp
          name: google-bucket-credentials
          readOnly: true
        {{ end }}
      volumes:
      - name: static-assets-volume
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: {{ .Chart.Name }}-nginx-config
      - name: init-pg-config
        configMap:
          name: {{ .Chart.Name }}-init-pg-config
          defaultMode: 0744
      - name: init-create-readonly-user-sh
        configMap:
          name: {{ .Chart.Name }}-create-readonly-user-sh
          defaultMode: 0744
      - name: init-setup-sh
        configMap:
          name: {{ .Chart.Name }}-setup-sh
          defaultMode: 0744
      {{ if .Values.provider.gcp }}
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
      - name: google-bucket-credentials
        secret:
          secretName: {{ .Values.app.storage.bucket.credentialsSecret }}
      {{ end }}
