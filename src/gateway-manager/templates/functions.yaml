apiVersion: v1
kind: ConfigMap
metadata:
  name: aether-functions
data:
  aether_functions.sh: |
    #!/usr/bin/env bash
    #
    # Copyright (C) 2018 by eHealth Africa : http://www.eHealthAfrica.org
    #
    # See the NOTICE file distributed with this work for additional information
    # regarding copyright ownership.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.
    #
    set -Eeuo pipefail

    KC_URL="${KEYCLOAK_INTERNAL}/keycloak/auth"
    LINE=`printf -v row "%${COLUMNS:-$(tput cols)}s"; echo ${row// /=}`
    AETHER_APPS=( kernel odk ui )

    # ------------------------------------------------------------------------------
    # https://www.keycloak.org/docs/latest/server_admin/index.html#using-the-admin-cli
    # ------------------------------------------------------------------------------

    function connect_to_keycloak {
        KC_ID=$(docker-compose ps -q keycloak)
        export KCADM="docker container exec -i ${KC_ID} ./keycloak/bin/kcadm.sh"

        echo_message "Connecting to keycloak server..."
        $KCADM \
            config credentials \
            --server ${KC_URL} \
            --realm master \
            --user "${KEYCLOAK_GLOBAL_ADMIN}" \
            --password "${KEYCLOAK_GLOBAL_PASSWORD}"
    }


    # Usage:   create_kc_realm <realm-name> [<realm-description>]
    function create_kc_realm {
        REALM=$1
        DESC="${2:-$REALM}"

        echo_message "Creating realm [${REALM}] [${DESC}]..."
        $KCADM \
            create realms \
            -s realm="${REALM}" \
            -s displayName="${DESC}" \
            -s loginTheme="aether" \
            -s enabled=true
    }


    # Usage:  create_kc_aether_client <realm-name>
    function create_kc_aether_client {
        REALM=$1

        echo_message "Creating aether client in realm [$REALM]..."
        REALM_URL="${BASE_HOST}/${REALM}/"
        PUBLIC_URL="${BASE_HOST}/${PUBLIC_REALM}/*"

        $KCADM \
            create clients \
            -r "${REALM}" \
            -s clientId="${KEYCLOAK_AETHER_CLIENT}" \
            -s publicClient=true \
            -s directAccessGrantsEnabled=true \
            -s baseUrl="${REALM_URL}" \
            -s 'redirectUris=["*","'${PUBLIC_URL}'"]' \
            -s enabled=true
    }

    # Usage:    create_kc_kong_client <realm-name>
    function create_kc_kong_client {
        REALM=$1

        echo_message "Creating client [${KEYCLOAK_KONG_CLIENT}] in realm [$REALM]..."
        REALM_URL="${BASE_HOST}/${REALM}/"

        $KCADM \
            create clients \
            -r "${REALM}" \
            -s clientId="${KEYCLOAK_KONG_CLIENT}" \
            -s publicClient=false \
            -s clientAuthenticatorType=client-secret \
            -s directAccessGrantsEnabled=true \
            -s baseUrl="${REALM_URL}" \
            -s 'redirectUris=["*"]' \
            -s enabled=true
    }


    # Usage:    create_kc_user <realm-name> <username> [<password>]
    function create_kc_user {
        REALM=$1
        USERNAME=$2
        PASSWORD=${3:-}

        echo_message "Creating user [$USERNAME] in realm [$REALM]..."
        $KCADM \
            create users \
            -r "${REALM}" \
            -s username="${USERNAME}" \
            -s enabled=true

        if [ ! -z "${PASSWORD}" ]; then
            $KCADM \
                set-password \
                -r "${REALM}" \
                --username "${USERNAME}" \
                --new-password="${PASSWORD}"
        fi
    }
