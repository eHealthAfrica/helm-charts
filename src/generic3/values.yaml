# Default values for generic.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Support for deployment and statefulset resource types
resourceType: deployment

replicaCount: 3

nameOverride:
fullnameOverride:

podAntiAffinity:
  enabled: true

# Additional init containers, e. g. for a database proxy, such as Google's cloudsql-proxy
extraInitContainers: |

# Additional sidecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy
extraContainers: |

## Add additional volumes and mounts
extraVolumes: |

app:
  name:
  db:
    type: postgres
    create: false
    enabled: false
    secret: database-credentials
    ssl:
      enabled: false
    host: 127.0.0.1
    port: 5432
    user:
    name:
    init: |
      # check to see if database exists
      db_exists=$(psql -t -c "select count(*) from pg_catalog.pg_database where datname='$DB_NAME'")
      # check to see if user exists
      user_exists=$(psql -t -c "select count(*) from pg_catalog.pg_roles where rolname='$DB_USERNAME'")
      if [ $db_exists -eq 0 ]; then
          psql -c "CREATE DATABASE $DB_NAME;"
      fi
      if [ $user_exists -eq 0 ]; then
        psql -c "CREATE USER $DB_USERNAME WITH PASSWORD '$DB_PASSWORD';"
      fi
      psql -c "GRANT $DB_USERNAME TO $PGUSER;"
      psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USERNAME;"
      psql -c "ALTER DATABASE $DB_NAME OWNER TO $DB_USERNAME;"
      echo "sql executed.."
      # create database extensions
      {{ if .Values.app.db.extensions }}
      {{- range .Values.app.db.extensions }}
      echo "creating Postgres database extensions"
      psql -d $DB_NAME -c 'CREATE EXTENSION IF NOT EXISTS {{ . | quote }} ;'
      {{- end }}
      {{ end }}

  resources:
    requests:
      cpu: 250m
      memory: 256M
    limits:
      cpu: 500m
      memory: 512Mi

  secret:
  config:
    enabled: false
  port:
  args: []
  static_root: /var/www/static
  static_path: /static
  storage:
    bucket:
      credentialsSecret:
  probe:
    type: request
    # type: tcp
    path: /health
    initialDelaySeconds: 120
    periodSeconds: 10
  volume:
    enabled: false
    mountPath:
    persist: false
    type: standard
    accessMode: ReadWriteOnce
    size: 10Gi
    nfs:
      server:
      path:

cronjob:
  schedule: 0 * * * *
  backoffLimit: 6
  restartpolicy: Never
  concurrencyPolicy: Allow

sidecar:
  enabled: false
  name:
  image:
    repository:
    tag:
    pullPolicy: IfNotPresent
  args: []
  port:
  probe:
    type: request
    # type: tcp
    path: /health
    initialDelaySeconds: 120
    periodSeconds: 10
  db:
    enabled: false

  resources:
     limits:
      cpu: 100m
      memory: 128Mi
     requests:
       cpu: 50m
       memory: 64Mi

database:
  instance:

url:

gcp: true

image:
  repository:
  tag:
  pullPolicy: IfNotPresent

nginx:
  enabled: false
  config: |
    server {
      {{- if .Values.debug }}
      error_log /var/log/nginx/error.log info;
      {{- else }}
      access_log off;
      {{- end }}
      location /health {
        proxy_pass http://127.0.0.1:{{ .Values.app.port }};
      }
    }
    server {
      server_name {{ .Values.url }};
      {{- if .Values.debug }}
      error_log   /var/log/nginx/error.log info;
      {{- else }}
      access_log  off;
      {{- end }}
      # Max upload size
      client_max_body_size 75M;   # adjust to taste

      location {{ .Values.app.static_path }}/ {
        alias {{ .Values.app.static_root }};
      }
      # Finally, send all non-static requests to the Django server.
      location / {
        proxy_pass http://127.0.0.1:{{ .Values.app.port }};
        proxy_set_header        Host               $host;
        proxy_set_header        X-Real-IP          $remote_addr;
        proxy_set_header        X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Host   $host:443;
        proxy_set_header        X-Forwarded-Server $host;
        proxy_set_header        X-Forwarded-Port   443;
        proxy_set_header        X-Forwarded-Proto  https;
        include    /etc/nginx/uwsgi_params; # or the uwsgi_params you installed manually
      }
    }

service:
  type: NodePort
  externalPort:
  internalPort:

imagePullSecrets:
  enabled: false
  name:

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "75M"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    monitor.stakater.com/enabled: "true"
    statuscake.monitor.stakater.com/contact-group: "DevOps"
    cert-manager.io/cluster-issuer: letsencrypt
    cert-manager.io/acme-challenge-type: dns01
    cert-manager.io/acme-dns01-provider: route53

  path: /
  hosts:
    - chart-example.local
  ssl:
    letsencrypt: true
    cert_secret: wildcard

extra_env_vars: {}

env_secrets:
  enabled: false
  name:

nodeSelector: {}

tolerations: []

affinity: {}
