apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "producer.fullname" . }}
  labels:
    app: {{ template "producer.name" . }}
    chart: {{ template "producer.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "producer.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "producer.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{ if .Values.provider.gcp }}
      nodeSelector:
        failure-domain.beta.kubernetes.io/zone: {{ .Values.persistent_disk.gce_zone }}
      {{ end }}
      containers:
        {{ if .Values.provider.gcp }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances={{ .Values.database.instance }}=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
        {{ end }}
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
          - {{ .Values.application.command }}
          env:
          - name: DEBUG
            value:  {{ quote .Values.debug }}
          - name: PRODUCER_SETTINGS_FILE
            value:  {{ quote .Values.application.config }}
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-database-user
          - name: PGPORT
            value: "5432"
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.database.secret }}
                key: host
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-database-password
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-database-name
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.database.secret }}
                key: host
          - name: POSTGRES_DBNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-database-name
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-readonly-db-user
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-readonly-db-password
          - name: KAFKA_BOOTSTRAP_SERVERS
            value: {{ .Values.app.kafkaUrl }}
          - name: KERNEL_URL
            value: {{ .Values.kernel_url }}
          - name: KERNEL_ADMIN_USERNAME
            value: {{ .Values.kernel_admin_username }}
          - name: KERNEL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-django-admin-password
          - name: KERNEL_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.application.secret }}
                key: kernel-django-admin-token
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            httpGet:
              path: /healthcheck
              port: {{ .Values.service.port }}
              httpHeaders:
              - name: X-Kubernetes-Health-Check
                value: livenessProbe
              - name: Host
                value: {{ .Values.url }}
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            httpGet:
              path: /healthcheck
              port: {{ .Values.service.port }}
              httpHeaders:
              - name: X-Kubernetes-Health-Check
                value: check
              - name: Host
                value: {{ .Values.url }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: producer-config
              mountPath: /etc/producer
              readOnly: true
      imagePullSecrets:
      - name: regsecret
      volumes:
      - name: {{ .Chart.Name }}
      {{ if .Values.provider.gcp }}
        gcePersistentDisk:
          pdName: {{ .Values.persistent_disk.name }}
          fsType: ext4
      {{- else -}}
        persistentVolumeClaim:
          claimName: {{ .Chart.Name }}
      {{ end }}
      - name: producer-config
        configMap:
          name: producer-config
          defaultMode: 0744
          items:
          - key: config.json
            path: config.json
      {{ if .Values.provider.gcp }}
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
      {{ end }}
