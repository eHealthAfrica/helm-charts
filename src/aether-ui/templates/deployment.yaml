apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    chart: {{ template "ui.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      release: {{ .Release.Name }}
  {{ if .Values.podAntiAffinity.enabled }}
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - {{ .Chart.Name }}
          topologyKey: "kubernetes.io/hostname"
  {{ end }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: init
        image: postgres:9.3-alpine
        command: ['bash', '-c', './scripts/init.sh']
        env:
        - name: PGHOST
          valueFrom :
            secretKeyRef:
              name: {{ .Values.app.db.secret }}
              key: host
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secret }}
              key: user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secret }}
              key: password
        - name: DB_NAME
          value: {{ .Values.app.db.name }}
        - name: DB_USERNAME
          value: {{ .Values.app.db.user }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secrets }}
              key: ui-database-password
        volumeMounts:
        - mountPath: /scripts
          name: init-config
        {{ if .Values.provider.gcp }}
        - name: cloudsql-instance-credentials
          mountPath: /secrets/cloudsql
          readOnly: true
        {{ end }}
      containers:
        {{ if .Values.provider.gcp }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances={{ .Values.database.instance }}=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
        {{ end }}
        - name: nginx
          image: nginx:stable-alpine
          ports:
          - containerPort: 80
          volumeMounts:
          - mountPath: /var/www/static
            name: static-assets-volume
          - mountPath: /etc/nginx/conf.d
            name: nginx-config
          - mountPath: /media
            name: {{ .Chart.Name }}
        - name: ui
          # This default allows us to overwrite '.Chart.Version' through the command line
          image: "{{ .Values.app.repository }}:{{ .Values.app.tag | default .Chart.Version }}"
          imagePullPolicy: {{ .Values.pullPolicy }}
          args:
          - {{ .Values.app.command }}
          ports:
            - name: http
              containerPort: {{ .Values.app.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
              httpHeaders:
              - name: X-Kubernetes-Health-Check
                value: livenessProbe
          readinessProbe:
            httpGet:
              path: /health
              port: http
              httpHeaders:
              - name: X-Kubernetes-Health-Check
                value: readinessProbe
          env:
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.app.secrets }}
                key: ui-django-secret-key
          - name: ADMIN_USERNAME
            value: {{ .Values.app.admin_user }}
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.app.secrets }}
                key: ui-django-admin-password
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.app.secrets }}
                key: ui-database-password
          - name: PGHOST
            value: {{ .Values.app.db.host }}
          - name: PGUSER
            value: {{ .Values.app.db.user }}
          - name: PGPORT
            value: {{ quote .Values.app.db.port }}
          - name: DB_NAME
            value: {{ .Values.app.db.name }}
          - name: AETHER_KERNEL_URL
            value: {{ .Values.app.kernel.url }}
          - name: CSRF_COOKIE_DOMAIN
            value: {{ .Values.domain }}
          - name: CSRF_TRUSTED_ORIGINS
            value: .{{ .Values.domain }}
          - name: AETHER_KERNEL_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.app.kernel.secret }}
                key: kernel-django-admin-token
          - name: DJANGO_STORAGE_BACKEND
            value: 'filesystem'
          - name: DEBUG
            value: {{ if .Values.debug }}"1"{{ else }}""{{ end }}
          - name: WEB_SERVER_PORT
            value: {{ quote .Values.app.port }}
          volumeMounts:
          - mountPath: /var/www/static
            name: static-assets-volume
      volumes:
      - name: {{ .Chart.Name }}
      - name: static-assets-volume
      - name: nginx-config
        configMap:
          name: {{ .Chart.Name }}-nginx-config
      - name: init-config
        configMap:
          name: {{ .Chart.Name }}-init-pg-config
          defaultMode: 0744
      {{ if .Values.provider.gcp }}
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
      {{ end }}
